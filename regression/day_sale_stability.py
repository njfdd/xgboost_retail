# coding=utf-8
import threading
from exporter.day_sale_exporter import print_evaluation, plt_draw, gen_predicts, corr_evaluation, write_corr
from feature_engine import f_binning
import pandas as pd

from job.xg_cv import get_best_paras

lock = threading.Lock()
from datetime import datetime, timedelta
from global_sources import file_operation


# predict job
def proba_job(dt, df_simple, df_label):
    dt_prev = df_label[(df_label['rundate'] < dt)]['rundate'].max()
    train_label = df_label[(df_label['rundate'] == dt_prev)].drop('rundate', 1)
    test_label = df_label[(df_label['rundate'] == dt)].drop('rundate', 1)
    result = {}
    if len(train_label) > 0 and len(test_label) > 0:
        result = {'y_test': test_label.values[0], 'y_pred': train_label['result'].mean()}
    if result:
        result['rundate'] = dt
    return result

def day_regression(store_id, goodsn_list, df_feature_full, date_max, gap=30):
    # make label as int
    df_feature_full['result'] = df_feature_full['result'].astype(int)

    df_results = pd.DataFrame()
    df_corr = pd.DataFrame()
    for goodsn in goodsn_list:
        df_goods_full = df_feature_full[(df_feature_full['goodscode']==goodsn) &
                                  (df_feature_full['storeid']==store_id)].drop('goodscode', 1).drop('storeid', 1)

        if len(df_goods_full) == 0:
            continue
        # binning
        df_goods_full = f_binning.binner_engine(df_goods_full)
        # feature and label
        df_feature = df_goods_full.drop('result', 1)
        df_label = df_goods_full[['result', 'rundate']]
        # get date range
        pred_dts = [x.strftime('%Y-%m-%d') for x in pd.date_range(end=date_max, periods=gap).tolist()]
        # get best parameters
        dt_min = pred_dts[0]
        # paras = {}
        # single process predict
        res_list = []
        for pred_dt in pred_dts:
            res_list.append(proba_job(pred_dt, df_feature, df_label))
        # generate plt draw data
        df_draw = df_feature
        df_draw['rundate'] = df_draw['rundate'] + timedelta(days=-2)
        df_draw = df_draw[df_draw['rundate'] >
                          (datetime.strptime(date_max, "%Y-%m-%d") - timedelta(days=gap+20)).strftime('%Y-%m-%d')]
        #exporter
        if not print_evaluation(goodsn, res_list):
            continue
        # if not plt_draw(store_id, goodsn, df_draw, res_list):
        #     continue
        succ, result = gen_predicts(goodsn, res_list)
        if not succ:
            continue
        df_results = pd.concat([df_results, result], ignore_index=True)
        #feature corr output
        df_corr = corr_evaluation(df_corr, store_id, goodsn, df_goods_full)
    write_corr(df_corr)
    return df_results

if __name__ == '__main__':
    store_list = [109]
    df_feature_full = file_operation.read_feature_full()
    for store_id in store_list:
        print(store_id)
        # all goodsn
        # goodsn_list = df_feature_full[df_feature_full['storeid']==store_id]['goodscode'].unique()
        goodsn_list = [
            2018602
        ]
        goodsn_list_166 = [2004083,2020075,2017999,2025696,2036842,2026253,2032689,2035596,2004092,2009767,2021667,2004476,2031175,2032104,2034543,2018602,2026853,2006304,2035740,2021116,2005413,2035864,2035177,2029939,2005364,2006293,2003228,2032590,2032385,2020598,2021612,2003293,2017307,2004482,2031026,2032284,2028900,2026686,2022531,2032361,2032587,2004326,2027203,2032066,2025102,2026210,2004353,2022292,2040331,2032589,2018241,2021662,2035517,2033756,2027020,2017293,2013793,2029398,2023289,2029744,2023591,2028665,2017286,2035552,2025107,2037523,2021215,2027019,2037993,2027021,2034633,2015440,2025103,2028679,2022799,2028741,2025105,2040067,2040259,2026471,2027762,2035186,2030543,2032735,2035834,2032659,2029635,2013789,2003280,2031364,2035037,2005812,2031064,2027880,2004638,2033796,2040068,2034082,2034617,2014329]
        goodsn_list_223 = [2034639,2036716,2025696,2020075,2016049,2017999,2004083,2034078,2035864,2031175,2032590,2032586,2025102,2018602,2032587,2032589,2012607,2026253,2035834,2036846,2003280,2021612,2040254,2028679,2026210,2036717,2038545,2028698,2027203,2004476,2035186,2009767,2021116,2021662,2039861,2026686,2025103,2021667,2025104,2029278,2035517,2013793,2025535,2038194,2027818,2003293,2035865,2004998,2032010,2037196,2029277,2040259,2033631,2025909,2030543,2026207,2035243,2023591,2028665,2032689,2025370,2035061,2034082,2034697,2032385,2034566,2004353,2017293,2017286,2035797,2013789,2005831,2034124,2035958,2004326,2005413,2017307,2005767,2009198,2037993,2003493,2027019,2003286,2040128,2031613,2027020,2026471,2020598,2034633,2005738,2018241,2017453,2032538,2004482,2032659,2032066,2022531,2030994]
        goodsn_list_598 = [2036274,2004083,2036636,2004092,2039992,2021667,2034443,2026253,2038979,2029939,2038981,2040652,2023289,2032586,2036275,2032085,2038708,2038978,2027203,2035596,2032590,2026471,2032589,2003228,2035834,2038707,2004476,2026686,2032587,2034543,2034280,2033756,2004998,2018602,2017999,2035740,2038600,2021612,2021116,2029398,2009198,2005364,2032906,2034281,2003280,2036329,2025103,2035625,2025102,2021662,2031364,2034286,2017307,2004326,2034283,2004482,2038980,2034844,2035555,2034843,2027020,2009767,2040254,2036846,2023591,2032659,2003354,2027019,2034617,2027021,2028741,2037986,2040331,2033868,2026210,2024836,2026470,2033869,2030931,2035554,2026646,2034110,2032406,2034287,2032405,2024892,2026473,2018241,2034845,2036842,2037993,2026207,2036330,2003286,2017293,2035517,2034520,2022531,2026507,2032084]
        goodsn_list_605 = [2034504,2034848,2004083,2017999,2026253,2006304,2035740,2034849,2026686,2006293,2003293,2012607,2027203,2035517,2025102,2009767,2018602,2032085,2013793,2009198,2017307,2003280,2005738,2021116,2032010,2032507,2004092,2036328,2013789,2015440,2031681,2029744,2040199,2005812,2025103,2007020,2004476,2013791,2025104,2030543,2025106,2004326,2029099,2003228,2005831,2019198,2004120,2005855,2005773,2026207,2038324,2025107,2018124,2003286,2036137,2032508,2038325,2035797,2036136,2026679,2032689,2036937,2036333,2036276,2034566,2036846,2025105,2040198,2035555,2029635,2038250,2025398,2038689,2017286,2040732,2036135,2036277,2005800,2021612,2026473,2026646,2033868,2026470,2035552,2032334,2004998,2032284,2033601,2022117,2037993,2034554,2033796,2026471,2031364,2022457,2035544,2027020,2040123,2032361,2037523]
        goodsn_list_718 = [2004083,2026686,2020075,2037241,2040183,2026253,2009767,2035982,2038223,2040013,2035596,2025102,2004092,2040188,2021116,2004476,2037944,2037871,2038392,2017999,2017293,2022292,2032066,2030543,2027203,2028665,2036970,2028900,2003293,2021612,2017307,2034855,2035037,2025105,2038408,2040022,2040032,2037242,2032361,2004482,2018241,2032689,2035552,2017286,2040020,2003228,2005413,2004326,2040577,2027021,2027020,2027019,2025103,2036717,2005364,2029744,2034697,2034617,2040309,2026654,2028741,2036505,2035555,2036975,2009198,2032525,2026507,2040067,2037109,2035740,2025479,2026210,2037993,2036271,2034633,2035517,2036333,2003280,2035958,2034639,2033756,2032385,2023591,2034566,2012607,2031364,2021662,2004998,2040746,2034543,2037376,2032010,2040128,2036958,2036694,2040068,2022146,2036950]
        goodsn_list_561 = [2025696,2032587,2032590,2004083,2032589,2032104,2035865,2032586,2026253,2028679,2020075,2035864,2034082,2028698,2034078,2026686,2004476,2034286,2006304,2004326,2032085,2003228,2032284,2009767,2004353,2035061,2005364,2021116,2004092,2005413,2034844,2017307,2034280,2021927,2036297,2025105,2021928,2023591,2018241,2034279,2035037,2024836,2005812,2025102,2025107,2008982,2032385,2024892,2035740,2004482,2021662,2026210,2026853,2035517,2030994,2027203,2025106,2032722,2025103,2013791,2013793,2031364,2017286,2017293,2013136,2006293,2033756,2026625,2034543,2025104,2029939,2034697,2026473,2017999,2036717,2036842,2026471,2029398,2015440,2035554,2027020,2027021,2022531,]
        goodsn_list_109 = [2020075,2004083,2034280,2032104,2025696,2030931,2024892,2032589,2034286,2032587,2032586,2034844,2032361,2004476,2035864,2026253,2032590,2035834,2032405,2032406,2025102,2024836,2004092,2034520,2034279,2017999,2028679,2034843,2034543,2004482,2022531,2034110,2009198,2025103,2023289,2026507,2004326,2035625,2003228,2028698,2021116,2023591,2026471,2018241,2034845,2022532,2032385,2029398,2025104,2027762,2003286,2026686,2034697,2031364,2034287,2029471,2026470,2027203,2034281,2017307,2029939,2009767,2026210,2025909,2021612,2026646,2021662,2026853,2003354,2006304,2034283,2004998,2026473,2030035,2035177,2032284,2034288,2022799,2017293,2025105,]
        goodsn_list_11001 = [2040203,2020075,2038849,2038859,2039758,2004083,2039499,2040241,2026253,2040726,2038829,2039427,2032066,2038838,2040495,2039823,2009767,2039739,2039771,2039430,2038819,2038929,2038812,2038850,2038931,2038832,2017999,2035552,2038858,2035555,2021116,2035725,2038831,2003293,2038935,2039846,2038833,2040481,2039445,2038810,2038830,2004092,2039450,2021199,2040484,2037944,2038853,2029744,2034543,2038856,2040482,2039425,2036333,2038949,2012607,2040550,2021612,2018602,2032689,2018134,2040777,2040212,2026473,2039447,2026470,2038809,2037523,2021667,2038943,2038926,2038820,2031364,2038934,2038806,2039997,2022292,2032104,2033796,2040004,2040485,2026646,2026471,2040234,2038854,2038824,2040729,2033601,2004476,2026686,2040246,2038855,2039415,2040011,2037231,2027203,2038944,2025696,2040721,2035554,]
        df_predict_result = day_regression(store_id, goodsn_list_109, df_feature_full, '2018-06-12', gap=60)
        file_operation.write_predicts(df_predict_result, store_id)